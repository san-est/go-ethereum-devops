services:
  geth:
    image: ghcr.io/san-est/go-ethereum-devops:latest
    #ports were grabbed from the docker quick start in the README within https://github.com/ethereum/go-ethereum
    ports:
      - "8545:8545"
      - "30303:30303"
    volumes:
      - ./data:/root/.ethereum
    #running the node in dev mode, enabling RPC server, binding it to all availible networks, sets on which port RPC should listen to and availible APIs.
    command: ["--dev", "--http", "--http.addr", "0.0.0.0", "--http.port", "8545", "--http.api", "eth,net,web3"]
        
  redis-db:
    image: 'redis:alpine'
    container_name: redis-db
    command: redis-server
    volumes:
      - ./redis-data:/data

  db-init:
    image: postgres:15
    volumes:
      - ./blockscout-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  db:
    depends_on:
      db-init:
        condition: service_completed_successfully
    image: postgres:15
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'db'
    command: postgres -c 'max_connections=200' -c 'client_connection_check_interval=60000'
    environment:
        POSTGRES_DB: 'blockscout'
        POSTGRES_USER: 'blockscout'
        POSTGRES_PASSWORD: 'ceWb1MeLBEeOIfk65gU8EjF8'
    ports:
      - target: 5432
        published: 7432
    volumes:
      - ./blockscout-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout -d blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    depends_on:
      - db
      - redis-db
    image: blockscout/${DOCKER_REPO:-blockscout}:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: 'backend'
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - ./logs/:/app/logs/

    build:
      context: https://github.com/blockscout/blockscout.git
      dockerfile: ./docker/Dockerfile
      args:
        CACHE_EXCHANGE_RATES_PERIOD: ""
        API_V1_READ_METHODS_DISABLED: "false"
        DISABLE_WEBAPP: "false"
        API_V1_WRITE_METHODS_DISABLED: "false"
        CACHE_TOTAL_GAS_USAGE_COUNTER_ENABLED: ""
        CACHE_ADDRESS_WITH_BALANCES_UPDATE_INTERVAL: ""
        ADMIN_PANEL_ENABLED: ""
        RELEASE_VERSION: 6.7.0
    links:
      - db:database
    environment:
        ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545/
        ETHEREUM_JSONRPC_TRACE_URL: http://host.docker.internal:8545/
        ETHEREUM_JSONRPC_WS_URL: ws://host.docker.internal:8545/
        CHAIN_ID: '1337'

  visualizer:
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'visualizer'


  sig-provider:
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'sig-provider'

  frontend:
    depends_on:
      - backend
    image: ghcr.io/blockscout/frontend:${FRONTEND_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'frontend'


  stats-db-init:
    image: postgres:15
    volumes:
      - ./stats-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  stats-db:
    depends_on:
      stats-db-init:
        condition: service_completed_successfully
    image: postgres:15
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'stats-db'
    command: postgres -c 'max_connections=200'
    environment:
        POSTGRES_DB: 'stats'
        POSTGRES_USER: 'stats'
        POSTGRES_PASSWORD: 'n0uejXPl61ci6ldCuE2gQU5Y'
    ports:
      - target: 5432
        published: 7433
    volumes:
      - ./stats-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stats -d stats"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  stats:
    depends_on:
      - stats-db
      - backend
    image: ghcr.io/blockscout/stats:${STATS_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'stats'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

    environment:
      - STATS__DB_URL=${STATS__DB_URL:-postgres://stats:n0uejXPl61ci6ldCuE2gQU5Y@stats-db:5432/stats}
      - STATS__BLOCKSCOUT_DB_URL=${STATS__BLOCKSCOUT_DB_URL:-postgresql://blockscout:ceWb1MeLBEeOIfk65gU8EjF8@db:5432/blockscout}
      - STATS__CREATE_DATABASE=${STATS__CREATE_DATABASE:-true}
      - STATS__RUN_MIGRATIONS=${STATS__RUN_MIGRATIONS:-true}

  user-ops-indexer:
    depends_on:
      - db
      - backend
    image: ghcr.io/blockscout/user-ops-indexer:${USER_OPS_INDEXER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'user-ops-indexer'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

    environment:
      - USER_OPS_INDEXER__INDEXER__RPC_URL=${USER_OPS_INDEXER__INDEXER__RPC_URL:-ws://host.docker.internal:8545/}
      - USER_OPS_INDEXER__DATABASE__CONNECT__URL=${USER_OPS_INDEXER__DATABASE__CONNECT__URL:-postgresql://blockscout:ceWb1MeLBEeOIfk65gU8EjF8@db:5432/blockscout}
      - USER_OPS_INDEXER__DATABASE__RUN_MIGRATIONS=true

  proxy:
    depends_on:
      - backend
      - frontend
      - stats
    image: nginx
    container_name: proxy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - "../proxy:/etc/nginx/templates"
    environment:
      BACK_PROXY_PASS: ${BACK_PROXY_PASS:-http://backend:4000}
      FRONT_PROXY_PASS: ${FRONT_PROXY_PASS:-http://frontend:3000}
    ports:
      - target: 80
        published: 80
      - target: 8080
        published: 8080
      - target: 8081
        published: 8081